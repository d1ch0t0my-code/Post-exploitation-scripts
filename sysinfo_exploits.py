#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# Author: Ángel Díaz (@d1ch0t0my)
# Website: https://github.com/d1ch0t0my-code

import sys, os, subprocess, argparse, distutils.spawn
from signal import signal, SIGINT
from os import path, remove

# colour definition
Default  = "\x1b[39m"
Green    = "\x1b[32m"
Red      = '\x1b[31m'
Yellow   = "\x1b[33m"
DarkGray = "\x1b[90m"

title = "\n                   _                 _        __                        _       _ _       \n                  | |               (_)      / _|                      | |     (_) |      \n     ___ _   _ ___| |_ ___ _ __ ___  _ _ __ | |_ ___     _____  ___ __ | | ___  _| |_ ___ \n    / __| | | / __| __/ _ \ '_ ` _ \| | '_ \|  _/ _ \   / _ \ \/ / '_ \| |/ _ \| | __/ __|\n    \__ \ |_| \__ \ ||  __/ | | | | | | | | | || (_) | |  __/>  <| |_) | | (_) | | |_\__ \\\n    |___/\__, |___/\__\___|_| |_| |_|_|_| |_|_| \___/   \___/_/\_\ .__/|_|\___/|_|\__|___/\n          __/ |                                                  | |                      \n         |___/                                                   |_|\n"

# Ctrl+C handler
def Handler(signal_received, fram):
    print("\n\n["+Yellow+"!"+Default+"] Ctrl+C detected")
    Delete_files()
    print("["+Red+"*"+Default+"] Ending script execution...")
    exit(0)

def ImpactVerf(impactType):
    if impactType == "DoS" or impactType =="Denial of Service":
        impactType="Denial of Service"
    elif impactType == "EoP" or impactType =="Elevation of Privilege":
        impactType="Elevation of Privilege"
    elif impactType == "ID" or impactType =="Information Disclosure":
        impactType="Information Disclosure"
    elif impactType == "RCE" or impactType =="Remote Code Execution":
        impactType="Remote Code Execution"
    elif impactType == "SfB" or impactType =="Security Feature Bypass":
        impactType="Security Feature Bypass"
    elif impactType == "Spf" or impactType =="Spoofing":
        impactType="Spoofing"
    else:
        print("\n["+Red+"!"+Default+"] \'"+impactType+"\' Is not recognised as a valid \'Impact Type\'\n")
        exit(1)
    return impactType

def Find_file(filename, search_path):
    for root, dirs, files in os.walk(search_path):
        if filename in files:
            return os.path.join(root, filename)

def Delete_files():
    if os.path.isfile('definitions.zip'):
        print("["+Green+"*"+Default+"] Deleting the 'wes.py' \'definitions.zip\' file")
        remove('./definitions.zip')        
    if os.path.isfile('wes.out'):
        print("["+Green+"*"+Default+"] Deleting the temporary file \'wes.out\'")
        remove('./wes.out')

def Script_not_found(name, url):
    print("\n["+Red+"!"+Default+"] "+name+" NOT found in the system!")
    print("["+Yellow+"¡"+Default+"] "+name+" it's necesary to run this script")
    print("["+Yellow+"¡"+Default+"] Please visit "+Yellow+url+Default+" to obtain it\n")
    exit(1)

def WesReturncodes(code, command, file, qfefile):
    if (code == 1):
        if distutils.spawn.find_executable("crow"):
            print("["+Red+"!"+Default+"] \"wes.py\" failed to detect the OS version based on the input file provided")
            print("[-] \"crow\" (© 2018-2021 Hennadii Chernyshchyk) was found installed!")
            print("["+Green+"*"+Default+"] Using \"crow\" (© 2018-2021 Hennadii Chernyshchyk) to translate systeminfo file")
            trnsCmd = 'crow -b -t en -f '+file+' > sys-translated.txt'
            cp = subprocess.run(trnsCmd, shell=True, capture_output=True)
            if(cp.returncode == 0):
                print("["+Green+"*"+Default+"] Generating the temporary file \'wes.out\'")
                command = command+'sys-translated.txt'+qfefile
                cp = subprocess.run(command, shell=True, capture_output=True)
                remove('./sys-translated.txt')
            else:
                print("["+Red+"*"+Default+"] The file could not be translated!")
                print("["+Red+"*"+Default+"] Ending script execution...")
                exit(1)
        else:
            print("["+Red+"!"+Default+"] \"wes.py\" failed to detect the OS version based on the input file provided")
            print("[-] \"wes.py\" only recognises files with English content!")
            print("["+Yellow+"¡"+Default+"] you can try translating your systeminfo file:\n    One option it to use the \"crow\" tool (© 2018-2021 Hennadii Chernyshchyk),\n    available at \"https://github.com/crow-translate/crow-translate\", to perform\n    the translation with the following command: crow -b -t en -f systeminfo.txt > translated.txt")
            Delete_files()
            print("["+Red+"*"+Default+"] Ending script execution...")
            exit(1)

if __name__ == '__main__':


    parser = argparse.ArgumentParser(
        add_help=True,
        formatter_class=argparse.RawDescriptionHelpFormatter,
        usage=title+"""

         sysinfo_exploits.py [-h] [-i IMPACT] [-o OUTPUT] [-q QFEFILE] systeminfo_file

""",
        epilog="""
Types of Vulnerabilities Impacts:
    DoS\t\t\tDenial of Service
    EoP\t\t\tElevation of Privilege
    ID \t\t\tInformation Disclosure
    RCE\t\t\tRemote Code Execution
    SfB\t\t\tSecurity Feature Bypass
    Spf\t\t\tSpoofing

Description:
  Tool to search for exploits for CVEs published on ExploitDB based on the output of the
  \'systeminfo\' command and optionally on the output of the 'wmic qfe' command.
  Use Arris Huijgen's ©wes.py tool to get the CVEs of unpatched vulnerabilities and then
  use Andrea Fioraldi's tool, ©cve_searchsploit, to search ExploitDB for published exploits

Copyright:
  ©wes.py: Copyright 2019 Arris Huijgen (https://github.com/bitsadmin/wesng/)
  ©cve_searchsploit: Copyright (c) 2017 Andrea Fioraldi (https://github.com/andreafioraldi/cve_searchsploit)
  ©Exploit DB: OffSec Services Limited 2021 (https://www.exploit-db.com)"""
    )

    if len(sys.argv) < 2:
        parser.print_usage()
        exit(1)

    parser.add_argument('systeminfo_file', help='The \'systeminfo\'  command output file')
    parser.add_argument('-i', '--impact', help='Type of vulnerability impact [default=ALL]')
    parser.add_argument('-o', '--output', help='File name to store the output')
    parser.add_argument('-q', '--qfefile', help='\'wmic qfe\' command output file')
    args = parser.parse_args()


    signal(SIGINT, Handler)

    print(title)


    if not os.path.isfile(args.systeminfo_file):
        print("["+Red+"!"+Default+"] systeminfo file \'"+args.systeminfo_file+"\' NOT found\n")
        exit(1)
    if args.qfefile:
        if not os.path.isfile(args.qfefile):
            print("["+Red+"!"+Default+"] qfefile file \'"+args.qfefile+"\' NOT found\n")
            exit(1)

    cve_path=Find_file("cve_searchsploit", "/")
    wes_path=Find_file("wes.py", "/")

    if cve_path is None:
        cve_url = "https://github.com/andreafioraldi/cve_searchsploit"
        Script_not_found("cve_searchsploit (© 2017 Andrea Fioraldi)", cve_url)

    if wes_path is None:
        wes_url = "https://github.com/bitsadmin/wesng"
        Script_not_found("wes.py (© 2019 Arris Huijgen)", wes_url)

    if args.impact:
        impact = ' -i \''+ImpactVerf(args.impact)+'\''
    else:
        impact = ''

    if args.qfefile:
        qfefile = ' '+args.qfefile
    else:
        qfefile = ' '


    print("["+Green+"*"+Default+"] Updating \'cve_searchsploit\'")
    subprocess.run(['cve_searchsploit', '-u'], capture_output=True)

    if not os.path.isfile('definitions.zip'):
        print("["+Green+"*"+Default+"] Updating \'wes.py\' to get \'definitions.zip\'")
        subprocess.run('python wes.py --update', shell=True, capture_output=True)

    print("["+Green+"*"+Default+"] Generating the temporary file \'wes.out\'")

    baseCommand = 'python '+wes_path+impact+' -o wes.out '
    command = baseCommand+args.systeminfo_file+qfefile
    cp = subprocess.run(command, shell=True, capture_output=True)
    if (cp.returncode != 0):
        WesReturncodes(cp.returncode, baseCommand, args.systeminfo_file, qfefile)

    print("["+Green+"*"+Default+"] Looking for "+impact[4:]+" exploits\n")

    with open("wes.out",) as f:
        targets = [line for line in f if "CVE-" in line]
    for element in targets:
        ele = element[element.find('CVE-'):-2]
        output = subprocess.run([cve_path, ele], capture_output=True, text=True)
        if output.returncode==0:
            if args.output:
                with open(args.output, 'a') as file:
                    file.write(output.stdout)
            else:
                print(output.stdout)

    Delete_files()
    print("["+Red+"*"+Default+"] Ending script execution...")